/*****************************************************
 * 프로그램ID	: SyncRedisFromOracle.c
 * 프로그램명	: Event를 수신해 Oracle과 Redis를 동기화한다
 *****************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <signal.h>
#include <errno.h>

#include <sys/types.h>
#include <sys/stat.h>
#include <sys/epoll.h>
#include <sys/ioctl.h>
#include <sys/time.h>
#include <time.h>

#include <dlfcn.h>

#include <network.h>
#include <profile.h>
#include <ft_common.h>
#include <ora_common.h>

#include <SyncRedis_interface.h>
#include "SyncRedisFromOracle.h"

/*************************************************************************************
 * 구현 시작..
 *************************************************************************************/
 
int main(int argc, char** argv)
{
	int i, n, nread;
    //char buff[MAX_BUFFER];
	
	SetProgramName(argv[0]);
	
	/* 서버를 초기화 한다. */
	InitServer();

    //sprintf(buff, "user:info:xxxx|user:info:yyyy");
    //ProcessUpdate(buff);

	while ( 1 )
    {
    	/* 소켓이벤트를 체크한다. (0.01초) */
    	n = epoll_wait(epoll_fd, events, MAX_SERVER_USER, 10);
		if ( n < 0 )
		{
			if ( errno != EINTR ) Log("main: epoll_wait Error [%d]\n", errno);
			usleep(3000);
		}
		
		for ( i = 0 ; i < n ; i++ )
		{
			if ( events[i].data.fd == server_sockfd )
			{
				/* 클라이언트를 받아들인다. */
				if ( AcceptUser(server_sockfd) == -1 )
					Log("main: User를 받아 들이는데 실패하였습니다.\n");
			}
			else
			{
				ioctl(events[i].data.fd, FIONREAD, &nread);
		
				/* 클라이언트 제거 */
				if ( nread == 0 )
					RemoveUser(events[i].data.fd);
		
				/* 클라이언트 요청을 받아들인다. */
				else
					ReceiveRequest(events[i].data.fd);
			}
		}
	}
	
	interrupt(0);
	
	exit(EXIT_SUCCESS);
}

/*
 * fd를 등록한다.
 */
int add_epoll(SOCKET fd)
{
    struct epoll_event event;

    event.events = EPOLLIN;
    event.data.fd = fd;
    if ( epoll_ctl(epoll_fd, EPOLL_CTL_ADD, fd, &event) == -1 )
    {
        Log("add_epoll: epoll_ctl EPOLL_CTL_ADD Failed!! errno[%d]\n", errno);
        return (-1);
    }

    return (0);
}

/*
 * fd를 해제한다.
 */
int del_epoll(SOCKET fd)
{
    struct epoll_event event;

    event.events = EPOLLIN;
    event.data.fd = fd;
    if ( epoll_ctl(epoll_fd, EPOLL_CTL_DEL, fd, &event) == -1 )
    {
        Log("del_epoll: epoll_ctl EPOLL_CTL_DEL Failed!! errno[%d]\n", errno);
        return (-1);
    }

    return (0);
}

/*************************************************************************************
 * 요청 데이타 처리 함수
 *************************************************************************************/

/**
 * 요청을 받아들인다
 */
int ReceiveRequest(SOCKET sockfd)
{
    int res, rcv, length;
    char rcvbuf[MAX_BUFFER];
    SRI_REQRES_HEADER* reqHeader;

    int user_offset = GetUserOffset(sockfd);
    if ( user_offset == -1 )
    {
        Log("ReceiveRequest: 사용자 정보를 찾을수 없습니다. sockfd[%d]\n", sockfd);
        del_epoll(sockfd); CloseSocket(sockfd);
        return (-1);
    }

	/* 사이즈를 읽어온다 읽어온다. */
    memset(rcvbuf, 0x00, MAX_BUFFER);
    if ( (res = ReceiveTCP(sockfd, rcvbuf, SRI_LENGTH_SIZE, &timeover)) <= 0 )
    {
        Log("ReceiveRequest: 사이즈 수신에 실패하였습니다. sockfd[%d] errno[%d]\n", sockfd, errno);
        RemoveUser(sockfd);
        return (-1);
    }
    rcv = res;

    /* 나머지 데이타를 읽어온다 */
    if ( (length = atoi(rcvbuf)) > 0 )
    {
        if ( (res = ReceiveTCP(sockfd, rcvbuf + SRI_LENGTH_SIZE, length, &timeover)) <= 0 )
        {
            Log("ReceiveRequest: 데이타 수신에 실패하였습니다. sockfd[%d] errno[%d]\n", sockfd, errno);
            RemoveUser(sockfd);
            return (-1);
        }
        rcv += res;
    }

    /* 로그를 기록한다 */
    Log("ReceiveRequest: rcvbuf[%d:%s]\n", strlen(rcvbuf), rcvbuf);
    time(&mdb->user.user_info[user_offset].polling_time);

    /* 처리구분에 따라 */
    reqHeader = (SRI_REQRES_HEADER*)rcvbuf;
    switch ( reqHeader->trid )
    {
        case SRI_TRID_UPDATE:
            res = ProcessUpdate(rcvbuf + sizeof(SRI_REQRES_HEADER));
            break;

        case SRI_TRID_DELETE:
            res = ProcessDelete(rcvbuf + sizeof(SRI_REQRES_HEADER));
            break;

        case SRI_TRID_DELETE_ALL:
            res = ProcessDeleteAll(rcvbuf + sizeof(SRI_REQRES_HEADER));
            break;

        default:
            Log("ReceiveRequest: 정의되지 않은 처리구분입니다 [%c]\n", reqHeader->trid);
            res = SRERR_UNDEFINED_TRID;
    }

    /* 응답데이타를 전송한다 */
    SendResponse(user_offset, reqHeader, res);

    return (0);
}

/**
 * Update를 처리한다
 */
int ProcessUpdate(char* buff)
{
    int i, key_count;
    REDIS_KEYS* keys;

    void* handle;
	int	(*func)(char*, COMMON_SHM*, REDIS_KEYS*, REDIS*, sql_context);
    int res;
	
	char dllib_name[128], func_name[128];
	sprintf(dllib_name, "%s/%s/%s", mdb->program_home, LIB_PATH, DLIB_TR_FILE);

    /* 키를 파싱한다 */
    if ( (key_count = ParseKeys(buff, &keys)) == 0 )
    {
        Log("ProcessUpdate: 키가 존재하지 않습니다 [%s]\n", buff);
        return (SRERR_NOTFOUND_KEY);
    }

    /* 동적라이브러리를 로드한다. */
    if ( !(handle = dlopen(dllib_name, RTLD_NOW)) )
    {
        free(keys);
        Log("ProcessUpdate: 공유라이브러리 오픈실패!! dllib_name[%s] errmsg[%s]\n", dllib_name, dlerror());
        return (SRERR_SYSTEM_ERROR);
    }
    
    /* 해당 TR의 처리함수를 가져온다. */
    for ( i = 0 ; i < key_count ; i++ )
    {
        if ( keys[i].count < 2 ) continue;
        
        char *key1, *key2;

        /* 처리함수명을 가져온다 */
        key1 = toLower(keys[i].key[0]); key2 = toLower(keys[i].key[1]);
        sprintf(func_name, "update_%s_%s", key1, key2);
        free(key1); free(key2);

        /* 처리함수 조회 */
        func = dlsym(handle, func_name);
        if ( dlerror() != NULL )
        {
            Log("ProcessUpdate: 처리함수 조회 실패!! func_name[%s] errmsg[%s]\n", func_name, dlerror());
            dlclose(handle); free(keys);
            return (SRERR_SYSTEM_ERROR);
        }

        /* 처리함수 실행 */
        if ( (res = func(program_name, mdb, &keys[i], &redis, ctx)) != SRERR_SUCCESS )
        {
            Log("ProcessUpdate: 처리함수 실행 중 에러!! func_name[%s] res[%d]\n", func_name, res);
            dlclose(handle); free(keys);
            return (res);
        }
    }

    /* 메로리 해제 */
	dlclose(handle);
    free(keys);

    return (SRERR_SUCCESS);
}

/**
 * Delete를 처리한다
 */
int ProcessDelete(char* buff)
{

    return (0);
}

/**
 * DeleteAll을 처리한다
 */
int ProcessDeleteAll(char* buff)
{

    return (0);
}

/**
 * Key Array를 파싱한다
 */
int ParseKeys(char* buff, REDIS_KEYS** rkeys)
{
    int key_count;
    REDIS_KEYS* keys;
    REDIS_KEYS key;

    char dtoken[256], ktoken[64];
    int dptr, kptr;

    /* 데이타를 파싱한다 */
    key_count = 0; keys = NULL;
    dptr = 0; dtoken[0] = 0;
    while ( 1 )
    {
        dptr = get_next_token(buff, dptr, dtoken, SRI_DATA_SEPERATOR);
        if ( dptr == -1 ) break;
        if ( strlen(dtoken) == 0 ) continue;

        /* 데이타의 세부키를 파싱한다 */
        kptr = 0; ktoken[0] = 0;
        memset(&key, 0x00, sizeof(REDIS_KEYS));
        while ( 1 )
        {
            kptr = get_next_token(dtoken, kptr, ktoken, ':');
            if ( kptr == -1 ) break;
            if ( strlen(ktoken) == 0 ) continue;

            strcpy(key.key[key.count], ktoken);
            key.count++;

            if ( key.count >= MAX_REDIS_KEY_COUNT ) break;
        }

        keys = (REDIS_KEYS*)realloc(keys, sizeof(REDIS_KEYS) * (key_count+1));
        memcpy( &keys[key_count], &key, sizeof(REDIS_KEYS) );
        key_count++;
    }

    *rkeys = keys;
    return (key_count);
}

/**
 * 사용자에게 응답을 전송한다
 */
int SendResponse(int user_offset, SRI_REQRES_HEADER* reqHeader, int rcode)
{
    char sndbuf[MAX_BUFFER];
    
    /* 보낼 헤더를 세팅한다 */
    memset(sndbuf, 0x00, MAX_BUFFER);
    sprintf(sndbuf, "%0*d%c%04d", SRI_LENGTH_SIZE, 5, reqHeader->trid, rcode);

    /* 응답데이타를 전송한다 */
    if ( SendTCP(mdb->user.user_info[user_offset].sockfd, sndbuf, strlen(sndbuf), &timeover) == -1 )
    {
        Log("SendResponse: 응답데이타 전송에 실패하였습니다. sockfd[%d] errno[%d]\n", mdb->user.user_info[user_offset].sockfd, errno);
        RemoveUser(mdb->user.user_info[user_offset].sockfd);
        return (-1);
    }
    Log("SendResponse: [%d:%s]\n", strlen(sndbuf), sndbuf);

    return (0);
}

char *toLower(char *str)
{
    int i, len = strlen(str);
    char *str_l = calloc(len+1, sizeof(char));

    for ( i = 0 ; i < len ; i++ )
    {
        str_l[i] = tolower((unsigned char)str[i]);
    }
    return str_l;
}

/*************************************************************************************
 * 사용자 소켓 처리사항
 *************************************************************************************/

/**
 * 사용자를 받아들인다.
 */
int AcceptUser(SOCKET sockfd)
{
	SOCKET fd;
	
	int offset;
	char ip[15];

	SERVER_USER user;
	
	/* 사용자소켓을 받아들인다. */
	if ( (fd = GetClientSocket(sockfd, ip)) == -1 )
	{
		Log("AcceptUser: 사용자를 받아들일 수 없습니다. [%d]\n", errno);
		return (-1);
	}

	/* 사용자 데이타 설정 */
	memset( &user, 0x00, sizeof(SERVER_USER) );
	user.sockfd = fd;
    strcpy(user.user_ip, ip);
    time(&user.connect_time);
    time(&user.polling_time);
	
	/* 빈공간을 찾아서 할당한다. */
	for ( offset = 0 ; offset < MAX_SERVER_USER ; offset++ )
	{
		if ( mdb->user.user_info[offset].sockfd == 0 )
			break;
	}
	if ( offset >= MAX_SERVER_USER )
	{	
		Log("AcceptUser: 허용된 최대 사용자가 초과되었습니다.\n");
		CloseSocket(fd);
		return (-1);
	}
	
	/* 사용자 접속 최종 허용 */
	memcpy( &mdb->user.user_info[offset], &user, sizeof(SERVER_USER) );
    mdb->user.user_count++;

	add_epoll(mdb->user.user_info[offset].sockfd);
	Log("사용자 접속: offset[%d] sockfd[%d] ip[%s]\n", offset, mdb->user.user_info[offset].sockfd, mdb->user.user_info[offset].user_ip);
	
	return (offset);
}

/**
 * 사용자 연결을 종료한다.
 */
int RemoveUser(SOCKET sockfd)
{
    int offset = GetUserOffset(sockfd);
    if ( offset == -1 )
    {
        del_epoll(sockfd); CloseSocket(sockfd);
        return (0);
    }

	usleep(10000);
	del_epoll(mdb->user.user_info[offset].sockfd);
	CloseSocket(mdb->user.user_info[offset].sockfd);
	
	Log("사용자 종료: offset[%d] sockfd[%d] ip[%s]\n", offset, mdb->user.user_info[offset].sockfd, mdb->user.user_info[offset].user_ip);
	memset( &mdb->user.user_info[offset], 0x00, sizeof(SERVER_USER) );
    mdb->user.user_count--;
	
	return (0);
}

/**
 * User Offset을 가져온다
 */
int GetUserOffset(SOCKET sockfd)
{
    int offset;

    for ( offset = 0 ; offset < MAX_SERVER_USER ; offset++ )
    {
        if ( mdb->user.user_info[offset].sockfd == sockfd )
            return (offset);
    }

    return (-1);
}

/*************************************************************************************
 * 초기화함수
 *************************************************************************************/

/**
 * 서버를 초기화한다.
 */ 
void InitServer()
{
    int i;
    char conf_file_name[256];
    struct sqlca sqlca;
    redisReply *reply;
	
	/* 공유메모리를 초기화 한다. */
	InitCommonMemory();
	
	/* 설정파일을 연다. */
	sprintf(conf_file_name, "%s/%s/%s", mdb->program_home, CONF_PATH, SERVER_CONFIG_FILE);
	if ( !OpenProfile(conf_file_name) )
	{
		Log("InitServer: 설정파일을 여는 도중 에러가 발생하였습니다. file[%s] errno[%d]\n", conf_file_name, errno);
		exit(EXIT_FAILURE);
	}
	
	/* 설정파일의 값을 가져온다. */
	server_port = GetProfileInt("SERVER_INFO", "SYNC_REDIS_ORACLE_PORT", 0);
	if ( server_port == 0 )
	{
		Log("InitServer: 서버포트 정보가 없습니다.\n");
		exit(EXIT_FAILURE);
	}
	
	/* 설정파일을 닫는다. */
	CloseProfile();

	/* epoll을 생성한다. */
    if ( (epoll_fd = epoll_create(MAX_SERVER_USER)) < 0 ) 
    { 
        Log("InitServer: epoll 생성 도중 에러가 발생하였습니다. errno[%d]\n", errno);
		exit(EXIT_FAILURE);
    }
    
	/* 서버 소켓을 생성한다. */
	server_sockfd = GetServerSocket(server_port, MAX_SERVER_USER);
	if ( server_sockfd == -1 )
	{
		Log("InitServer: 서버 소켓 생성에 실패 하였습니다. port[%d] errno[%d]\n", server_port, errno);
		exit(EXIT_FAILURE);
	}
	add_epoll(server_sockfd);
	
	/* 변수를 초기화한다. */
	memset(mdb->user.user_info, 0x00, sizeof(SERVER_USER)*MAX_SERVER_USER);
    mdb->user.user_count = 0;
	timeover.tv_sec = 5; timeover.tv_usec = 0;

    /* Redis에 접속한다 */
    redis.count = mdb->config.redis_count;
    for ( i = 0 ; i < redis.count ; i++ )
    {
        strcpy(redis.conn[i].host, mdb->config.redis[i].ip);
        redis.conn[i].port = mdb->config.redis[i].port;

        redis.conn[i].c = redisConnect(redis.conn[i].host, redis.conn[i].port);
        if ( redis.conn[i].c != NULL && redis.conn[i].c->err )
        {
            Log("InitServer: REDIS 연결에 실패 하였습니다. ip[%s:%d] err[%s]\n", redis.conn[i].host, redis.conn[i].port, redis.conn[i].c->errstr);
		    exit(EXIT_FAILURE);
        }

        reply = redisCommand(redis.conn[i].c, "AUTH %s", mdb->config.redis[i].auth);
        if ( reply == NULL || reply->type == REDIS_REPLY_ERROR )
        {
            Log("InitServer: REDIS 인증에 실패 하였습니다. ip[%s:%d] auth[%s] err[%s]\n", redis.conn[i].host, redis.conn[i].port, mdb->config.redis[i].auth, reply->str);
            freeReplyObject(reply);
            exit(EXIT_FAILURE);
        }
        freeReplyObject(reply);
    }

    /* ORACLE DB에 접속한다. */
	EXEC SQL CONTEXT ALLOCATE :ctx;
	EXEC SQL CONTEXT USE :ctx;
	EXEC SQL CONNECT :mdb->config.oracle_user;

    /* Process를 등록한다. */
	if ( (process_id = RegistProcess(_PROC_SYNC_REDIS_ORACLE_)) == -1 )
	{
		Log("InitServer: 프로세스 실행에 실패하였습니다.\n");
		exit(EXIT_FAILURE);
	}
	
	/* 시스널 핸들러 설정 */
	signal(SIGHUP, SIG_IGN);
	signal(SIGPIPE, SIG_IGN);
	signal(SIGINT, interrupt);
    signal(SIGTERM, interrupt);
    signal(SIGQUIT, interrupt);
    
	Log("InitServer: 서버 초기화! Process Start [%d]..................................\n", process_id);
    Log("InitServer: TCP Server Port [%d]\n", server_port);
}

/**
 * 서버를 종료한다.
 */
void interrupt(int sig)
{
    int i;
    struct sqlca sqlca;

	/* 연결된 사용자 모두 종료 */
	for ( i = 0 ; i < MAX_SERVER_USER ; i++ )
	{
		if ( mdb->user.user_info[i].sockfd )
			RemoveUser(mdb->user.user_info[i].sockfd);
	}
	CloseSocket(server_sockfd);
	
	/* epoll 제거 */
	close(epoll_fd);

    /* REDIS 연결종료 */
    for ( i = 0 ; i < redis.count ; i++ )
    {
        redisFree(redis.conn[i].c);
    }
	
	/* DB연결을 종료한다. */
	EXEC SQL CONTEXT USE :ctx;
	EXEC SQL COMMIT WORK RELEASE;
	EXEC SQL CONTEXT FREE :ctx;
	
	/* 프로세스 등록 해제 */
	RemoveProcess(_PROC_SYNC_REDIS_ORACLE_);
	DeAttachShm((void*)mdb);
	
    exit(EXIT_SUCCESS);
}
